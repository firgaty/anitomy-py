# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _anitomy
else:
    import _anitomy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Options(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    allowed_delimiters = property(_anitomy.Options_allowed_delimiters_get, _anitomy.Options_allowed_delimiters_set)
    ignored_strings = property(_anitomy.Options_ignored_strings_get, _anitomy.Options_ignored_strings_set)
    parse_episode_number = property(_anitomy.Options_parse_episode_number_get, _anitomy.Options_parse_episode_number_set)
    parse_episode_title = property(_anitomy.Options_parse_episode_title_get, _anitomy.Options_parse_episode_title_set)
    parse_file_extension = property(_anitomy.Options_parse_file_extension_get, _anitomy.Options_parse_file_extension_set)
    parse_release_group = property(_anitomy.Options_parse_release_group_get, _anitomy.Options_parse_release_group_set)

    def __init__(self):
        _anitomy.Options_swiginit(self, _anitomy.new_Options())
    __swig_destroy__ = _anitomy.delete_Options

# Register Options in _anitomy:
_anitomy.Options_swigregister(Options)

kElementIterateFirst = _anitomy.kElementIterateFirst
kElementAnimeSeason = _anitomy.kElementAnimeSeason
kElementAnimeSeasonPrefix = _anitomy.kElementAnimeSeasonPrefix
kElementAnimeTitle = _anitomy.kElementAnimeTitle
kElementAnimeType = _anitomy.kElementAnimeType
kElementAnimeYear = _anitomy.kElementAnimeYear
kElementAudioTerm = _anitomy.kElementAudioTerm
kElementDeviceCompatibility = _anitomy.kElementDeviceCompatibility
kElementEpisodeNumber = _anitomy.kElementEpisodeNumber
kElementEpisodeNumberAlt = _anitomy.kElementEpisodeNumberAlt
kElementEpisodePrefix = _anitomy.kElementEpisodePrefix
kElementEpisodeTitle = _anitomy.kElementEpisodeTitle
kElementFileChecksum = _anitomy.kElementFileChecksum
kElementFileExtension = _anitomy.kElementFileExtension
kElementFileName = _anitomy.kElementFileName
kElementLanguage = _anitomy.kElementLanguage
kElementOther = _anitomy.kElementOther
kElementReleaseGroup = _anitomy.kElementReleaseGroup
kElementReleaseInformation = _anitomy.kElementReleaseInformation
kElementReleaseVersion = _anitomy.kElementReleaseVersion
kElementSource = _anitomy.kElementSource
kElementSubtitles = _anitomy.kElementSubtitles
kElementVideoResolution = _anitomy.kElementVideoResolution
kElementVideoTerm = _anitomy.kElementVideoTerm
kElementVolumeNumber = _anitomy.kElementVolumeNumber
kElementVolumePrefix = _anitomy.kElementVolumePrefix
kElementIterateLast = _anitomy.kElementIterateLast
kElementUnknown = _anitomy.kElementUnknown
class Elements(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def size(self):
        return _anitomy.Elements_size(self)

    def begin(self, *args):
        return _anitomy.Elements_begin(self, *args)

    def cbegin(self):
        return _anitomy.Elements_cbegin(self)

    def end(self, *args):
        return _anitomy.Elements_end(self, *args)

    def cend(self):
        return _anitomy.Elements_cend(self)

    def at(self, *args):
        return _anitomy.Elements_at(self, *args)

    def get(self, category):
        return _anitomy.Elements_get(self, category)

    def get_all(self, category):
        return _anitomy.Elements_get_all(self, category)

    def clear(self):
        return _anitomy.Elements_clear(self)

    def insert(self, category, value):
        return _anitomy.Elements_insert(self, category, value)

    def erase(self, *args):
        return _anitomy.Elements_erase(self, *args)

    def set(self, category, value):
        return _anitomy.Elements_set(self, category, value)

    def count(self, category):
        return _anitomy.Elements_count(self, category)

    def empty(self, *args):
        return _anitomy.Elements_empty(self, *args)

    def find(self, *args):
        return _anitomy.Elements_find(self, *args)

    def __init__(self):
        _anitomy.Elements_swiginit(self, _anitomy.new_Elements())
    __swig_destroy__ = _anitomy.delete_Elements

# Register Elements in _anitomy:
_anitomy.Elements_swigregister(Elements)

class Anitomy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Parse(self, filename):
        return _anitomy.Anitomy_Parse(self, filename)

    def elements(self):
        return _anitomy.Anitomy_elements(self)

    def options(self):
        return _anitomy.Anitomy_options(self)

    def tokens(self):
        return _anitomy.Anitomy_tokens(self)

    def __init__(self):
        _anitomy.Anitomy_swiginit(self, _anitomy.new_Anitomy())
    __swig_destroy__ = _anitomy.delete_Anitomy

# Register Anitomy in _anitomy:
_anitomy.Anitomy_swigregister(Anitomy)



